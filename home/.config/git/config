# vim: set noexpandtab sw=0 :
[user]
	useConfigOnly = true
[color]
	ui = auto
[core]
	editor = nvim
[log]
	decorate = short
[merge "ours"]
	name = "Keep ours merge"
	driver = true
[pull]
	ff = only
[push]
	default = upstream
[rebase]
	autosquash = true
[init]
	defaultBranch = master
[alias]
	a = add --patch
	aa = add -v --all
	add-as-submodule = "!_() { \
		[[ $# -eq 1 ]] || return; \
		set -- \"${@%/}\"; set -- \"${@/#/${GIT_PREFIX}}\"; \
		git submodule add $(git -C \"$1\" url) \"$1\"; \
	}; _"
	alias = !git config --get-regexp ^alias\\. | sed 's/^alias\\.\\([^ ]*\\) /\\1\\\t => /'
	amend = commit --amend
	branch-mv = branch -m
	branch-name = symbolic-ref --short HEAD
	branches = !git branch -a | cut -c 3-
	configedit = config --global -e
	conflicts = diff --check
	conflict-files = diff --name-only --diff-filter=U
	d = diff
	delete-current-branch = !git detach && git branch -d @{-1} && :
	delete-merged-branch = !git merged | xargs git branch -d
	detach = checkout --detach
	diff-filename = diff --name-only
	diff-words = diff --color-words='\\w+|[^[:space:]]'
	discard = reset --hard HEAD
	discard-local = reset --hard @{u}
	feature = "!_() { [[ -n $1 ]] && git switch -c \"feature/$1\"; }; _"
	fixup = commit --fixup
	fomm = "!_() { set -- \"$@\" $(git master) ; set -x; git fetch origin \"$1:$1\"; }; _"
	fetch-prune = fetch --prune
	git = !git
	hash = rev-parse HEAD
	ignore = "!_() { for i in \"$@\"; do printf '%s\n' \"/${GIT_PREFIX}$i\" >> .gitignore; done; }; _"
	initc = commit --allow-empty -m \"Initial commit.\"
	keep-ours = "!_() { for i in \"$@\"; do printf '%s\n' \"/${GIT_PREFIX}$i merge=ours\" >> .gitattributes; done; }; _"
	latest-tag = describe --tags --abbrev=0 --always
	master = !git config init.defaultBranch || printf 'master'
	merged = !git branch --merged | grep -Ev '\\*|master|develop|release|gh-pages' | tr -d '^ '
	new = switch -c
	newtag = tag -a
	pr = pull --rebase origin develop
	pull-tags = pull --tags
	pushf = push --force-with-lease
	pushu = push -u origin HEAD
	reset-author-all = rebase -r --root --exec 'git commit --amend --allow-empty --no-edit --reset-author'
	reset-to-head = reset --hard HEAD
	reset-to-remote = reset --hard @{u}
	remote-convert-to-ssh-url = !git remote set-url origin $(git remote get-url origin | sed 's%^https://github.com/%git@github.com:%')
	rg = !rg --hidden --glob '!.git'
	root = rev-parse --show-toplevel
	s = !git stash list && git status
	shallow-clone = clone --depth 1
	shallow-clone-recursive = clone --depth 1 --recurse-submodules --shallow-submodules
	skip = update-index --skip-worktree
	staged = diff --cached
	stashes = stash list
	submodule-add-shallow = submodule add --depth 1
	submodule-debug = "!_() { \
		bat .gitmodules; \
		git config --get-regexp '^submodule\\.'; \
		fd --hidden --no-ignore '^config$' .git/modules -X bat; \
		git submodule foreach 'bat .git'; \
		}; _"
	submodule-diff = submodule foreach git diff
	submodule-rm = "!_() { \
		[[ $# -eq 1 ]] || return; \
		set -- \"${@%/}\"; set -- \"${@/#/${GIT_PREFIX}}\"; \
		[[ -f \"$1/.git\" ]] && set -- \"$@\" $(sed 's/^gitdir: \\(\\.\\.\\/\\)\\+//' \"$1/.git\"); \
		git submodule deinit -f \"$1\"; \
		git rm -f \"$1\"; \
		[[ -n $2 ]] && rm -rf \"$2\" || :; \
	}; _"
	submodule-mv = "!_() { \
		[[ $# -eq 2 ]] || return; \
		set -- \"${@%/}\"; set -- \"${@/#/${GIT_PREFIX}}\"; \
		set -- \"$@\" $(git submodule-name \"$1\"); \
		[[ -n $3 ]] || return; \
		mkdir -p $(dirname \"$2\"); \
		git mv \"$1\" \"$2\" || return; \
		shift 2; \
		set -- \"$1\" $(git config -f .gitmodules \"submodule.$1.path\"); \
		git config --rename-section \"submodule.$1\" \"submodule.$2\"; \
		git config -f .gitmodules --rename-section \"submodule.$1\" \"submodule.$2\"; \
		mkdir -p \".git/modules/$2\"; \
		mv \".git/modules/$1/\"* \".git/modules/$2/.\" && rmdir \".git/modules/$1\"; \
		git config -f \".git/modules/$2/config\" core.worktree $(realpath --relative-to \".git/modules/$2\" \"$2\"); \
		printf 'gitdir: %s\n' $(realpath --relative-to \"$2\" \".git/modules/$2\") > \"$2/.git\"; \
		git add .gitmodules; \
	}; _"
	submodule-name = "!_() { \
		[[ $# -eq 1 ]] || return; \
		set -- \"${@%/}\"; set -- \"${@/#/${GIT_PREFIX}}\"; \
		git config -f .gitmodules --get-regexp '^submodule\\..*\\.path$' | grep '\\.path '$1'$' | sed 's?^submodule\\.\\(.*\\)\\.path '$1'$?\\1?';\
	}; _"
	submodule-pull = submodule foreach git pull
	submodule-status = submodule foreach git status
	submodule-update-shallow = submodule update --depth 1
	submodule-url = "!_() { \
		[[ $# -eq 1 ]] || return; \
		set -- \"${@%/}\"; set -- \"${@/#/${GIT_PREFIX}}\"; \
		set -- $(git submodule-name \"$1\"); \
		git config -f .gitmodules \"submodule.$1.url\"; \
	}; _"
	t = tree -10
	tags = tag
	today = !git log --reverse --branches --since=midnight --date=iso --author=\"$(git config user.name)\" --pretty=format:'%C(7)* %C(auto)%h%d%C(reset)%C(cyan)%C(reset) %s %C(blue)by %an%C(8),%C(reset) %C(green)%ad%C(reset)'
	touch = commit --amend --date=now --no-edit
	tree = log --graph --all --pretty=format:'%x09%C(auto)%h%d%C(reset)%C(cyan)%C(reset) %s %C(blue)by %an%C(8),%C(reset) %C(green)%ar%C(reset)'
	uncommit = reset --soft HEAD~
	unshallow = fetch --unshallow
	unskip = update-index --no-skip-worktree
	unstage = reset HEAD --
	untrack = rm --cache --
	untracked = ls-files --others --exclude-standard
	url = config --get remote.origin.url
	wip = commit -m WIP
	zip = !git archive --worktree-attributes --format=zip HEAD -o $(basename $(pwd)).zip
